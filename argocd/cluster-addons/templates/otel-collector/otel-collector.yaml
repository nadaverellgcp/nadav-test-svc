# Load spec to a variable
{{- $addonSpecs := fromYaml (include "otelCollector.addonSpecs.v1" (dict "addonName" "otelCollector" "Values" .Values "Release" .Release)) }}
# Use the addonV1 template to render the addon spec
{{ include "addon.v1" (dict "addonName" "otelCollector" "Values" $addonSpecs "Release" .Release) }}


{{- define "otelCollector.addonSpecs.v1" }}
{{- $addon := .Values.otelCollectorAddon }}
{{- if and $addon $addon.enabled}}
{{- $collectorChart := $addon.valuesObject.charts.collector }}
{{- $addonValues := ( $addon.valuesObject | default dict) }}
{{- $destinationNamespace := index ($addon.valuesObject.destination | default dict ) "namespace" | default "observability" }}
{{include "addon.v1.argoContext" .}}
otelCollectorAddon:
  enabled: {{ $addon.enabled | default false }}
  valuesObject:
    destination:
      namespace: {{ $destinationNamespace | quote}}
    charts:
      {{- if and $collectorChart ( $collectorChart.enabled | default false ) }}
      collector:
        repoURL:  "https://open-telemetry.github.io/opentelemetry-helm-charts"
        targetRevision: {{ $collectorChart.targetRevision | default "0.82.0" | quote }}
        name: opentelemetry-collector
        parameters:
          - name: fullnameOverride
            value: "otel-collector-opentelemetry-collector"
        valuesObject:
          {{- if $addonValues }}
          {{ toYaml $addonValues |  nindent 10 }}
          {{- end }}
          enabled: true
          extraEnvs:  
          {{- if and $addonValues.tempo $addonValues.tempo.enabled $addonValues.tempo.basicAuth.enabled }}
            - name: TEMPO_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ $addonValues.tempo.basicAuth.secretName }}
                  key: auth-client
          {{- end }}
          {{- if and $addonValues.mimir $addonValues.mimir.enabled $addonValues.mimir.basicAuth.enabled }}
            - name: MIMIR_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ $addonValues.mimir.basicAuth.secretName }}
                  key: auth-client
          {{- end }}
          mode: deployment
          presets:
            kubernetesAttributes:
              enabled: true
          resources:
            limits:
              memory: 200Mi
          service:
            type: ClusterIP
          ports:
            metrics:
              enabled: true
            prometheus:
              enabled: true
              containerPort: 9464
              servicePort: 9464
              protocol: TCP
          podAnnotations:
            prometheus.io/scrape: "true"
            prometheus.io/port: "9464"
            koala_managed: "true"
          config:
            exporters:
            {{- if and $addonValues.mimir $addonValues.mimir.enabled }}
              prometheusremotewrite:
                endpoint: "http://tracing-mimir-nginx.{{ $destinationNamespace }}/api/v1/push"
              {{- if .insecureHost}}
                tls:
                  insecure: true
              {{- end }}
            {{- end }}

            {{- with $addonValues.mimir }}
            {{- if .enabled }}
              prometheusremotewrite:
                {{- if .host }}
                  endpoint: "{{ .host }}"
                {{- else}}
                  endpoint: "http://tracing-mimir-nginx.{{ $destinationNamespace }}/api/v1/push"
                {{- end }}
                {{- if .insecureHost}}
                  tls:
                    insecure: true
                {{- end }}
                {{- if .basicAuth.enabled }}
                  headers:
                    authorization: Basic ${env:MIMIR_AUTH_TOKEN}
                {{- end }}
            {{- end}}
            {{- end}}

            {{- with $addonValues.tempo }}
            {{- if .enabled }}
              otlp/tracing:
                {{- if .host }}
                  endpoint: "{{ .host }}"
                {{- else}}
                  endpoint: "http://tracing-tempo-distributor.{{ $destinationNamespace }}.svc:4317"
                {{- end }}
                {{- if .basicAuth.enabled }}
                  headers:
                    authorization: Basic ${env:TEMPO_AUTH_TOKEN}
                {{- end }}
            {{- end}}
            {{- end}}
        
            extensions:
              health_check: {}
              memory_ballast:
                size_in_percentage: 40
            processors:
              resource:
                  attributes:
                  - key: service.instance.id
                    from_attribute: k8s.pod.uid
                    action: insert
              filter/empty_http_server_duration:
                error_mode: ignore
                metrics:
                  metric:
                      - 'name == "http.server.duration" and type != METRIC_DATA_TYPE_HISTOGRAM'
                      - 'name == "http.client.duration" and type != METRIC_DATA_TYPE_HISTOGRAM'
              batch: {}
              memory_limiter:
                check_interval: 5s
                limit_percentage: 80
                spike_limit_percentage: 25

            receivers:
              jaeger:
                protocols:
                  grpc:
                    endpoint: ${env:MY_POD_IP}:14250
                  thrift_compact:
                    endpoint: ${env:MY_POD_IP}:6831
                  thrift_http:
                    endpoint: ${env:MY_POD_IP}:14268
              otlp:
                protocols:
                  grpc:
                    endpoint: ${env:MY_POD_IP}:4317
                  http:
                    endpoint: ${env:MY_POD_IP}:4318
              prometheus:
                config:
                  scrape_configs:
                    - job_name: opentelemetry-collector
                      scrape_interval: 10s
                      static_configs:
                        - targets:
                            - ${env:MY_POD_IP}:8888
            service:
              extensions:
                - health_check
                - memory_ballast
              pipelines:
              {{- if and $addonValues.tempo $addonValues.tempo.enabled }}
                traces:
                  exporters:
                    - otlp/tracing
                  processors:
                    - k8sattributes
                    - memory_limiter
                    - batch
                  receivers:
                    - otlp
                    - jaeger
              {{- end }}
                metrics:
                  receivers: 
                    - otlp
                    - prometheus
                  processors: 
                    - memory_limiter
                    - k8sattributes
                    - filter/empty_http_server_duration
                    - resource
                    - batch
                  exporters: 
                    {{- if and $addonValues.mimir $addonValues.mimir.enabled }}
                    - prometheusremotewrite
                    {{- else}}
                    - debug
                    {{- end }}
{{- end }}
{{- end }}
{{- end }}